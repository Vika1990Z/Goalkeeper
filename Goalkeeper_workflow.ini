
GOALKEEPER

Preparation:

1. Create VM with ubuntu-1804-bionic;
2. Install pip3
    # sudo apt-get update
    # sudo apt install python3-pip
3. Install OpenstackSDK
(https://docs.openstack.org/openstacksdk/latest/user/connection.html)
    # pip3 install openstacksdk    
4. Install nmap and nmap module for python3.6:
    # sudo apt-get install nmap
    # pip3 install python-nmap




Run goalkeeper.py

1. Configure logging - func "logInsert(logStr)"
or configure output to the console if we start the application through Kubernetes Cluster

2. Collect all hosts that we plan to scan into one array 'ips' - func "ip_range()" 
        "188.40.161.1 - 188.40.161.127"
        "46.4.240.33 - 46.4.240.63"

3. Start scanning all of our IPs for the dangerous ports. 
    3.1. define a list of "dangerous" ports:
    https://www.bsi.bund.de/EN/Topics/IT-Crisis-Management/CERT-Bund/CERT-Reports/HOWTOs/howtows_node.html
    
            DNS Open-resolver: port=53/udp; # DNS (Domain Name System)
            Multicast DNS (mDNS) services: port=5353/udp; # Multicast DNS (mDNS) 
            NTP servers: port=123/udp; # NTP (Network Time Protocol) 
            SSDP servers: port=1900/udp; # SSDP (Simple Service Discovery Protocol)
            SNMP servers: port=161/udp; # SNMP (Simple Network Management Protocol) 
            Telnet servers: port=23/tcp; # TELNET (teletype network)  
            LDAP servers: port=389/tcp and 389/udp; # LDAP (Lightweight Directory Access Protocol)
            Elasticsearch servers: port=9200/tcp; # Elasticsearch
            Memcached servers: port=11211/tcp and 11211/udp; # Memcached 
            Redis servers: port=6379/tcp; # Redis (remote dictionary server)
            MongoDB servers: port=27017/tcp; # MongoDB 
            MySQL/MariaDB servers: port=3306/tcp; # MySQL/MariaDB 
            PostgreSQL servers: port=5432/tcp; # PostgreSQL
            Apache Cassandra NoSQL servers: port=9042/tcp, 9160/tcp, 7000/tcp, 7001/tcp, 7199/tcp, 8888/tcp, 61620/tcp, 61621/tcp; # Apache Cassandra 
            Microsoft SQL-Server (MSSQL) browser services: port=1434/udp; # Microsoft SQL Server 
            Portmapper services: port=111/tcp and 111/udp; # Open Network Computing Remote Procedure Call
            Sphinx servers: port=9306/tcp and 9312/tcp; # Sphinx (SQL Phrase Index) 
            Ubiquiti Device Discovery services: port=10001/udp; 
            NetBIOS name services: port=137/udp 135/udp, 138/udp, 139/udp and 445/udp; # NetBIOS (Network Basic Input/Output System)
            
        ports = 53,5353,123,1900,161,23,389,9200,11211,6379,27017,3306,5432,9042,9160,7000,7001,7199,8888,61620,61621,1434,111,9306,9312,10001,137,135,138,139,445
        

    3.2. scan all our IP addresses for openness of these ports - "nm = nmap.PortScanner()"

    3.3. if the host has at least one open port from the list of scanned, you need to send a notification to the owner of the project to which this host belongs 
    
    3.4. find the contact details of this client:
        3.4.1. configure Connection to OpenStack services - func "connection_with_openstack()"
        3.4.2. through openstacksdk find the projectID that owns the host with the open "dangerous" port - block 1 of func "find_project_name(ip)"
        3.4.3. by the found projectID, determine the project NAME of this project in Fleio - block 2 of func "find_project_name(ip)"
        3.4.4. through the Fleio API, using the found project NAME, find the contact details assigned to this project - func "find_email_fleio(ip)"

    3.5. send a letter with a notification and scan results to the found mail address - func "sendmail_report(to_adr, code)"









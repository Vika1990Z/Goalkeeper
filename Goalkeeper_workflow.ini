
GOALKEEPER

Подготовака:

1. Создаем ВМ-ку с ОС ubuntu-1804-bionic;
2. Устанавливаем pip3
    # sudo apt-get update
    # sudo apt install python3-pip
3. Устанавливаем OpenstackSDK
(https://docs.openstack.org/openstacksdk/latest/user/connection.html)
    # pip3 install openstacksdk    
4. Устанавливаем nmap и nmap модуль для python3.6:
    # sudo apt-get install nmap
    # pip3 install python-nmap




Запускаем goalkeeper.py

1. Настраиваем логирование - функция "logInsert(logStr)"
или настраиваем вывод в консоль, если приложение будем запускать через кубернетис-кластер

2. Собираем все хосты, которые планируем сканировать в один массив 'ips' - функция "ip_range()" 
        "188.40.161.1 - 188.40.161.127"
        "46.4.240.33 - 46.4.240.63"

3. Начинаем сканирование всех наших IPs на октырость "опасных" портов  
    3.1. определяем список "опасных" портов:
    https://www.bsi.bund.de/EN/Topics/IT-Crisis-Management/CERT-Bund/CERT-Reports/HOWTOs/howtows_node.html
    
            DNS Open-resolver: port=53/udp; # DNS (англ. Domain Name System «система доменных имён»)
            Multicast DNS (mDNS) services: port=5353/udp; # Multicast DNS (mDNS) является способом использования привычных программных интерфейсов DNS в небольших сетях, где нет необходимости в обычном DNS-сервере. 
            NTP servers: port=123/udp; # NTP (англ. Network Time Protocol — протокол сетевого времени) 
            SSDP servers: port=1900/udp; # SSDP (англ. Simple Service Discovery Protocol — простой протокол обнаружения сервисов)
            SNMP servers: port=161/udp; # SNMP (англ. Simple Network Management Protocol — простой протокол сетевого управления) 
            Telnet servers: port=23/tcp; # TELNET (сокр. от англ. teletype network) — сетевой протокол для реализации текстового терминального интерфейса по сети   
            LDAP servers: port=389/tcp and 389/udp; # LDAP (англ. Lightweight Directory Access Protocol — «легкорасширяемый протокол доступа к каталогам»)
            Elasticsearch servers: port=9200/tcp; # Elasticsearch — тиражируемая свободная программная поисковая система, обычно используется при сложном поиске по базе документов
            Memcached servers: port=11211/tcp and 11211/udp; # Memcached — программное обеспечение, реализующее сервис кэширования данных в оперативной памяти на основе хеш-таблицы.
            Redis servers: port=6379/tcp; # Redis (от англ. remote dictionary server) — резидентная система управления базами данных (СУБД) класса NoSQL с открытым исходным кодом
            MongoDB servers: port=27017/tcp; # MongoDB (от англ. humongous — огромный) — документоориентированная система управления базами данных (СУБД) класса NoSQL с открытым исходным кодом, не требующая описания схемы таблиц
            MySQL/MariaDB servers: port=3306/tcp; # MySQL/MariaDB это система управления реляционными базами данных с открытым исходным кодом (СУРБД)
            PostgreSQL servers: port=5432/tcp; # PostgreSQL - это свободно распространяемая объектно-реляционная система управления базами данных (ORDBMS)
            Apache Cassandra NoSQL servers: port=9042/tcp, 9160/tcp, 7000/tcp, 7001/tcp, 7199/tcp, 8888/tcp, 61620/tcp, 61621/tcp; # Apache Cassandra — распределённая система управления базами данных, относящаяся к классу NoSQL
            Microsoft SQL-Server (MSSQL) browser services: port=1434/udp; # Microsoft SQL Server — система управления реляционными базами данных (РСУБД), разработанная корпорацией Microsoft. 
            Portmapper services: port=111/tcp and 111/udp; # Отображатель портов, который на компьютере предоставляет доступ к  сервисам RPC. RPC (англ. Open Network Computing Remote Procedure Call) — широко используемая система удаленного вызова процедур. 
            Sphinx servers: port=9306/tcp and 9312/tcp; # Sphinx (англ. SQL Phrase Index) — система полнотекстового поиска, имеет высокую скорость индексации и поиска, а также способность интеграции с существующими СУБД (MySQL, PostgreSQL) 
            Ubiquiti Device Discovery services: port=10001/udp; # Для поиска IP-адреса или MAC-адреса устройств Ubiquiti в вашей сети
            NetBIOS name services: port=137/udp 135/udp, 138/udp, 139/udp and 445/udp; # NetBIOS (Network Basic Input/Output System) — протокол для работы в локальных сетях на персональных ЭВМ типа IBM/PC. Разрешение имени NetBIOS — это процесс определения IP-адреса по имени NetBIOS.
            
        ports = 53,5353,123,1900,161,23,389,9200,11211,6379,27017,3306,5432,9042,9160,7000,7001,7199,8888,61620,61621,1434,111,9306,9312,10001,137,135,138,139,445
        

    3.2. сканируем наши все IPs на октырость этих портов - "nm = nmap.PortScanner()"

    3.3. если у хоста есть хоть один открытый порт из списка сканируемых, нужно отправить уведомление владельцу проекта, которому принадлежит данный хост 
    
    3.4. определяем контактные данные данного клиента:
        3.4.1. настраиваем  Connection к сервисам OpenStack - функция "connection_with_openstack()"
        3.4.2. через openstacksdk находим projectID, которому принадлежит хост с открытым "опасным" портом - блок 1 функции "find_project_name(ip)"
        3.4.3. по найденному projectID, определяем project NAME этого проэкта во Fleio - блок 2 функции "find_project_name(ip)"
        3.4.4. через Fleio API по найденому project NAME находим контактные данные, закрепленные за данным проектом - функция "find_email_fleio(ip)"

    3.5. отправляем на найденный почтовый адресс письмо с уведомлением и результатами сканирования - функция "sendmail_report(to_adr, code)"








